name: Deploy Docker Image

on:
  push:
    branches:
      - main
  workflow_dispatch:  # Permite ejecutar manualmente el workflow desde GitHub
jobs:
  deploy:
    runs-on: self-hosted  # Usa el runner en Docker

    steps:
      - name: Clonar el repositorio
        uses: actions/checkout@v4

      - name: Obtener versión del JAR desde el pom.xml
        run: |
          VERSION=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout)
          VERSION=${VERSION//-SNAPSHOT/}  # Elimina "-SNAPSHOT"
          echo "VERSION=$VERSION" >> $GITHUB_ENV

      - name: Verificar que la versión no está vacía
        run: |
          echo "Building Docker image with version: $VERSION"
        env:
          VERSION: ${{ env.VERSION }}

      - name: Construir la imagen Docker
        run: |
          if [[ -z "${{ env.VERSION }}" ]]; then
            echo "ERROR: VERSION está vacía. Verifica la obtención desde el pom.xml"
            exit 1
          fi
          docker build -t gateway:${{ env.VERSION }} .

      - name: Guardar la imagen
        run: docker save -o /workspace/gateway-$VERSION.tar gateway:$VERSION

      - name: Cargar la imagen en Docker
        run: docker load < /workspace/gateway-$VERSION.tar

      - name: Actualizar el archivo de deployment en docker-compose.yml
        run: sed -i "s/gateway:.*/gateway:$VERSION/" /workspace/docker-compose.yml

      - name: Levantar servicios con Docker Compose
        run: docker-compose -f /workspace/docker-compose.yml up -d
