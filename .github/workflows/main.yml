name: Deploy Docker Image

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  deploy:
    runs-on: self-hosted  # El runner self-hosted debe tener acceso al Docker daemon

    steps:
      - name: Clonar el repositorio
        uses: actions/checkout@v4

      - name: Obtener versión del pom.xml
        id: get_version
        run: |
          # Extrae la versión completa, por ejemplo "0.0.1-SNAPSHOT"
          VERSION=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout)
          # Si deseas eliminar el sufijo "-SNAPSHOT", descomenta la siguiente línea:
          VERSION=${VERSION//-SNAPSHOT/}
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          echo "::set-output name=VERSION::$VERSION"
          echo "Versión obtenida: $VERSION"

      - name: Validar que la versión no esté vacía
        run: |
          if [ -z "${{ env.VERSION }}" ]; then
            echo "ERROR: VERSION está vacía. Verifica la obtención desde pom.xml"
            exit 1
          fi
          echo "Building Docker image with version: ${{ env.VERSION }}"

      - name: Construir la imagen Docker
        run: |
          docker build --build-arg VERSION=${{ env.VERSION }} -t gateway:${{ env.VERSION }} .

      - name: Actualizar docker-compose.yml con la versión
        run: |
          # Se asume que en docker-compose.yml hay una línea que empieza con "image: gateway:"
          # Se actualiza para que use la imagen con la versión recién construida.
          sed -i "s|^ *image: gateway:.*|image: gateway:${{ env.VERSION }}|" docker-compose.yml
          echo "Contenido actualizado de docker-compose.yml:"
          cat docker-compose.yml

      - name: Levantar servicios con Docker Compose
        run: docker compose up -d
